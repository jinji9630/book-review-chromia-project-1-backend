import main.{ book, create_book, get_all_books, book_review, create_book_review, get_reviews_by_rating };

val book_keeper = rell.test.keypair(
    priv = x"12853D8AA562CF6C52219B7996478E811D8ABE00E8AA0CC1D8FA2CFD14E6681B",
    pub = x"02FC4C37E85702AA6F08CC705084AB09B22ADB8070D63C36FE250BBD296A2C0C37",
    bob=  "bob, alice, trudy, charlie, dave, eve, frank, grace, heidi"
);

function test_add_book() {
    rell.test.tx()
        .op(create_book("123", "Book1", "Author1"))
        .op(create_book("124", "Book2", "Author2"))
        .sign(book_keeper)
        .run();

    val all_books = book @* { };

    assert_equals(all_books.size(), 2);
    assert_equals(all_books[0].title, "Book1");
    assert_equals(all_books[0].author, "Author1");
}

function test_add_book_review() {
    rell.test.tx()
        .op(create_book("123", "Book1", "Author1"))
        .op(create_book_review("123", "Reviewer1", "ReviewText1", 5))
        .op(create_book_review("123", "Reviewer2", "ReviewText2", 3))
        .sign(book_keeper)
        .run();

    val reviews = book_review @* { };
    val book = book @ { .isbn == "123" };

    assert_equals(reviews.size(), 2);
    assert_equals(book, reviews[0].book);
    assert_equals(reviews[0].reviewer_name, "Reviewer1");
    assert_equals(reviews[0].review, "ReviewText1");
    assert_equals(reviews[0].rating, 5);
}
function test_get_books() {
    rell.test.tx()
        .op(create_book("123", "Book1", "Author1"))
        .op(create_book("124", "Book2", "Author2"))
        .sign(book_keeper)
        .run();

    val reviews = get_all_books();
    assert_equals(reviews.size(), 2);
}

val bob = rell.test.keypairs.bob;
function test_add_book_as_non_admin() {
    rell.test.tx()
        .op(create_book("123", "Book1", "Author1"))
        .sign(bob)
        .run_must_fail();
}

function test_get_reviews_by_rating() {
    rell.test.tx()
        .op(create_book("123", "Book1", "Author1"))
        .op(create_book_review("123", "Reviewer1", "ReviewText1", 4))
        .op(create_book_review("123", "Reviewer2", "ReviewText2", 5))
        .op(create_book_review("123", "Reviewer3", "ReviewText3", 4))
        .op(create_book_review("123", "Reviewer4", "ReviewText4", 1))
        .sign(book_keeper)
        .run();
    val reviews = get_reviews_by_rating(4);
    assert_equals(reviews.size(), 2);
}
